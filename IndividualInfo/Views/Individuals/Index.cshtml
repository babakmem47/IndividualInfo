@using IndividualInfo.ViewModels
@{
    ViewBag.Title = "اسامی افراد";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-lg-1 col-xs-1"></div>
    <div class="col-lg-10 col-xs-10" align="center">
        <h3>لیست افراد (شماره تماس)</h3>
    </div>
    <div class="col-lg-1 col-xs-1"></div>
</div>

<div class="row">
    <div class="col-lg-1 col-xs-1">
        @*@Html.ActionLink("+", "New", "Individuals", null, new { @class = "btn btn-primary btn-lg", title = "افزودن فرد جدید" })*@
        @*<a id="btnNewIndividual" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#individualFormModal" title=" افزودن فرد جدید... ">+</a>*@
        <button id="btnNewIndividual" class="btn btn-primary" data-toggle="modal" data-target="#individualFormModal" title="افزودن فرد/تماس جدید" style="font-size:20px"><i class="fa fa-user-plus"></i></button>
    </div>
    <div class="col-lg-10 col-xs-10" align="right">
    </div>
    <div class="col-lg-1 col-xs-1"></div>
</div>

<div class="row voffset2">
    @*<div class="col-lg-1 col-xs-1"></div>*@
    <div class="col-lg-12 col-xs-12">
        <table id="individualTable" class="table table-bordered table-hover table-striped table-condensed table-responsive">
            <thead>
                <tr>
                    <td>ردیف</td>
                    <td>نام</td>
                    <td>محل کار</td>
                    <td>سمت</td>
                    <td><i class="fa fa-intersex" style="font-size:16px"></i></td>
                    <td> مستقیم  <span class="glyphicon glyphicon-phone-alt"></span></td>
                    <td>داخلی@*<span class="glyphicon glyphicon-earphone"></span>*@</td>
                    <td> موبایل &nbsp;<span class="glyphicon glyphicon-phone"></span></td>
                    <td> ایمیل @*<i class="fa fa-envelope-o" style="font-size:14px"></i>*@</td>
                    <td>توضیحات</td>
                    <td class="fontsize9">ویرایش | حذف</td>
                </tr>
            </thead>

            <tbody></tbody>
        </table>
    </div>
    @*<div class="col-lg-1 col-xs-1"></div>*@
</div>

<!-- Modal -->
<div class="modal fade" id="individualFormModal" role="dialog">
    <div class="modal-dialog modal-edit-form">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">ویرایش</h4>
            </div>
            <div class="modal-body">
                @*@using (Html.BeginForm("Save", "Individuals", FormMethod.Post, new { @class = "form-inline" }))
                {*@
                <form id="individualForm" method="post" class="form-inline" autocomplete="off">

                    <div class="row">
                        <div class="form-group form-inline width140px">
                            <label for="Name">نام</label>
                            <input class="form-control" data-val="true" data-val-maxlength="حداکثر 70 کاراکتر"
                                   data-val-maxlength-max="70" data-val-required="پر کردن فیلد نام ضروری است"
                                   id="Name" name="Name" type="text" value="" />
                            <span class="field-validation-valid" data-valmsg-for="Name" data-valmsg-replace="true"></span>
                        </div>

                        <div class="form-group form-inline width65px">
                            <label for="WorkPlaceType">نوع محل کار</label>
                            <select class="form-control" id="WorkPlaceType" name="WorkPlaceType"></select>
                        </div>

                        <div class="form-group form-inline width100px autocomplete">
                            <label for="WorkPlaceName">نام محل کار</label>
                            <input class="form-control" data-val="true" data-val-maxlength="حداکثر 60 کاراکتر"
                                   data-val-maxlength-max="50" id="WorkPlaceName" name="WorkPlaceName" type="text" value="" />
                            <span class="field-validation-valid" data-valmsg-for="WorkPlaceName" data-valmsg-replace="true"></span>
                        </div>

                        <div class="form-group form-inline width95px">
                            <label for="SematId">سِمَت</label>
                            <select class="form-control" data-val="true" data-val-number="The field سِمَت must be a number." id="SematId" name="SematId"></select>
                            <span class="field-validation-valid" data-valmsg-for="SematId" data-valmsg-replace="true"></span>
                        </div>
                        <div class="form-group form-inline width45px">
                            <label for="Gender">جنسیت</label>
                            <select class="form-control" id="Gender" name="Gender"></select>
                            <span class="field-validation-valid" data-valmsg-for="Gender" data-valmsg-replace="true"></span>
                        </div>
                        <div class="form-group form-inline width95px">
                            <label for="TelDirect">تلفن مستقیم</label>
                            <input class="form-control ltrcell" data-val="true" data-val-maxlength="حداکثر 50 کاراکتر" data-val-maxlength-max="50" id="TelDirect" name="TelDirect" type="text" value="" />
                            <span class="field-validation-valid" data-valmsg-for="TelDirect" data-valmsg-replace="true"></span>
                        </div>
                        <div class="form-group form-inline width37px">
                            <label for="TelDakheli"> داخلی</label>
                            <input class="form-control ltrcell" data-val="true" data-val-maxlength="حداکثر 4 کاراکتر" data-val-maxlength-max="4" id="TelDakheli" name="TelDakheli" type="text" value="" />
                            <span class="field-validation-valid" data-valmsg-for="TelDakheli" data-valmsg-replace="true"></span>
                        </div>
                        <div class="form-group form-inline width100px">
                            <label for="Mobile">موبایل</label>
                            <input class="form-control ltrcell" data-val="true" data-val-length="شماره صحیح نیست" data-val-length-max="13" data-val-length-min="13" id="Mobile" name="Mobile" type="text" value="" />
                            <span class="field-validation-valid" data-valmsg-for="Mobile" data-valmsg-replace="true"></span>
                        </div>
                        <div class="form-group form-inline width130px">
                            <label for="Mobile">ایمیل</label>
                            <input class="form-control ltrcell" data-val="true" data-val-email="آدرس ایمیل صحیح نیست" data-val-maxlength="حداکثر 40 کاراکتر" data-val-maxlength-max="40" id="Email" name="Email" type="text" value="" />
                            <span class="field-validation-valid" data-valmsg-for="Email" data-valmsg-replace="true"></span>
                        </div>
                        <div class="form-group form-inline width150px">
                            <label for="Description">توضیحات</label>
                            <textarea class="form-control" rows="3" data-val="true" data-val-maxlength="حداکثر 250 کاراکتر" data-val-maxlength-max="250" id="Description" name="Description" type="text" value=""> </textarea>
                            <span class="field-validation-valid" data-valmsg-for="Description" data-valmsg-replace="true"></span>
                        </div>

                    </div>

                    <br />
                    <br />
                    <br />
                    <input data-val="true" data-val-number="The field Id must be a number."
                           data-val-required="The Id field is required." id="Id" name="Id" type="hidden" />
                    @*@Html.AntiForgeryToken()*@
                    @*<button id="savebutton" type="submit" class="btn btn-primary">ذخیره</button>*@
                    <button type="button" id="saveButton2" class="btn btn-primary">تست ذخیره</button>

                </form>

                @*}*@  <!-- End of Form Html.BeginForm -->
            </div>
            @*<div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>*@
        </div>

    </div>
</div>
<!-- End of Modal -->
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        function PopulateSelectOptionsWithNameProp(select, jsonData) {
            select.empty(); // reset(clear) first
            $.each(jsonData,
                function() {
                    select.append($("<option />").val(this.id).text(this.name));
                });
        }


        $(document).ready(function() {
            $(".table").persiaNumber();

            var individualTable = $("#individualTable");
            var row = 1;

            individualTable.DataTable({
                "pageLength": 20,

                "oLanguage": {
                    "sSearch": "جستجو  ",
                    "sSearchPlaceholder": "یه چیزی بنویس ...",
                    "sLengthMenu": "نمایش  _MENU_  رکورد در جدول",
                    "decimal": "",
                    "sEmptyTable": "هیچ داده قابل دسترسی در جدول یافت نشد",
                    "sInfo": "نمایش _START_ تا _END_ از _TOTAL_ ورودی",
                    "sInfoEmpty": "نمایش 0 تا 0 از صفر ورودی",
                    "sInfoFiltered": "(فیلتر شده از _MAX_ کل ورودی ها)",
                    "infoPostFix": "",
                    "thousands": ",",
                    "sLoadingRecords": "بارگذاری ...",
                    "sProcessing": "پردازش ...",
                    "sZeroRecords": "هیچ رکوردی که مطابقت داشته باشد یافت نشد",
                    "oPaginate": {
                        "sFirst": "اول",
                        "sLast": "آخر",
                        "sNext": "بعدی",
                        "sPrevious": "قبلی"
                    }
                },

                "sDom":
                    "<'row'<'col-sm-6'f><'col-sm-6'l>>" +
                        "<'row'<'col-sm-12'tr>>" +
                        "<'row'<'col-sm-5'i><'col-sm-7'p>>",

                "columnDefs": [
                    { "className": "text-center", "targets": "_all" }
                ],

                ajax: {
                    url: "/api/individuals",
                    dataSrc: ""
                },

                columns: [
                    {
                        data: "",
                        orderable: false,
                        className: "width30px",
                        //searchable: false,
                        //sortable: false,
                        render: function() {
                            return row++;
                        }
                    },
                    {
                        data: "name"
                    },
                    {
                        data: "workPlaceDto.name",
                        className: "width95px",
                        render: function(data, type, individual) {
                            if (data !== 0)
                                return individual.workPlaceDto.workPlaceTypeDto.name +
                                    " " +
                                    individual.workPlaceDto.name;
                            else
                                return '';
                        }
                    },
                    {
                        data: "sematDto.id",
                        className: "width95px",
                        render: function(data, type, individual) {
                            if (data !== 0)
                                return individual.sematDto.name;
                            else
                                return '';
                        }
                    },
                    {
                        orderable: false,
                        data: "gender",
                        render: function(data) {
                            if (data === true)
                                return "<td><i class='fa fa-female' style='font-size:14px;'></i></td>";
                            else if (data === false)
                                return "<td><i class='fa fa-male' style='font-size:14px;'></i></td>";
                            else
                                return '';
                        }
                    },
                    {
                        orderable: false,
                        data: "telDirect",
                        className: "ltrcell width77px"
                    },
                    {
                        orderable: false,
                        data: "telDakheli",
                        className: "ltrcell width37px"
                    },
                    {
                        orderable: false,
                        className: "ltrcell width80px",
                        data: "mobile"
                    },
                    {
                        orderable: false,
                        className: "ltrcell width30px",
                        data: "email",
                        render: function(data) {
                            if (data !== null)
                                return "<td><i class='fa fa-envelope-o' style='font-size:14px;' data-toggle='tooltip' data-placement='top' title='" +
                                    data +
                                    "'></i></button></td>";
                            else
                                return '';
                        }
                    },
                    {
                        data: "description"
                    },
                    {
                        orderable: false,
                        className: "text-left EditRemoveColumn",
                        data: "id",
                        render: function(data) {
                            return "<a href='/Individuals/Edit/" +
                                data +
                                "'> " +
                                "<span class='glyphicon glyphicon-edit' title='... ویرایش'</span></a>" +
                                "&nbsp;" +
                                "<a href='' class='link-open-edit-modal' data-toggle='modal' data-target='#individualFormModal' data-individual-id='" +
                                data +
                                "'><span class='glyphicon glyphicon-edit' title='... ویرایش'></span></a>" +
                                "&nbsp;&nbsp;" +
                                "<button class='btn-link js-delete' data-person-id='" +
                                data +
                                "'> " +
                                "<span class='glyphicon glyphicon-remove' title='حذف'</span></button>";
                        }
                    }
                ],
                // DataTables has fully been initialized:
                "initComplete": function(settings, json) {
                    $('.sorting_asc').removeClass('sorting_asc'); // remove sorting icon from ردیف

                    $('[data-toggle="tooltip"]').tooltip();

                    // show email 
                    $(".fa-envelope-o").click(function() {
                        console.log("clicked");
                        var tip = $(this).attr("title");
                        bootbox.alert(tip);
                    });
                }
            }); // end of DataTable

            individualTable.on("click",
                ".js-delete",
                function() {
                    var delButton = $(this);
                    var delbtn = this;
                    console.log(delButton.closest("tr").attr);
                    //console.log(delbtn.parent("tr"));
                    var dialog = bootbox.dialog({
                        title: 'تائید',
                        message: "آیا مطمئن هستید که می خواهید رکورد " + " '" + + "' " + "حذف شود؟",
                        buttons: {
                            yes: {
                                label: "حذف",
                                className: 'btn-danger pull-left',
                                callback: function() {
                                    $.ajax({
                                            url: "/api/individuals/" + delButton.attr("data-person-id"),
                                            method: "DELETE"
                                        })
                                        .done(function() {
                                            var rowToBeDelete = delButton.parents("tr");
                                            rowToBeDelete.fadeOut(200,
                                                function() {
                                                    table.row(rowToBeDelete).remove().draw();
                                                });
                                        })
                                        .fail(function() {
                                            alert("Something failed");
                                        });
                                }
                            },
                            no: {
                                label: "خیر",
                                className: 'btn-default btn-left-bootbox',
                                callback: function() {
                                    bootbox.hideAll();
                                }
                            }
                        }
                    });
                });
            // On Page load:
            // Populate Select Options: WorkPlaceType, Semat and Gender for once (because they do not get updated in this page) //
            // Populate WorkPlaceType select options
            $.getJSON("/api/workplacetypes/",
                function(workPlacetypes) {
                    var select = $("#WorkPlaceType");
                    PopulateSelectOptionsWithNameProp(select, workPlacetypes);
                    $("#WorkPlaceType option[value='3']").attr("title", "مدیریت شعب مناطق");
                });

            // Populate Semat select options
            $.getJSON("/api/semats/",
                function(semats) {
                    var select = $("#SematId");
                    PopulateSelectOptionsWithNameProp(select, semats);
                });

            // Populate Gender Select Option
            var genderSelect = $("#Gender");
            genderSelect.empty();
            genderSelect.append("<option value></option>");
            genderSelect.append("<option value='true'>زن</option>");
            genderSelect.append("<option value='false'>مرد</option>");
            //_________________________________________________________________________________________________________________//

            //// Click on + button (New Individual) (Modal window) //////
            $("#btnNewIndividual").click(function() {
                $(".modal-title").text("افزودن فرد(تماس) جدید");

                // Assign form control id value
                $("#Id").val(0);

                // Initialize value of form control for adding new record
                $("#Name").val('');
                $("#Name").attr("placeholder", "نام و نام خانوادگی/نام تماس...");
                //$("#WorkPlaceType").val(0);   //if we want it to be nothing
                $("#TelDirect").val('');
                $("#TelDakheli").val('');
                $("#Mobile").val('');
                $("#Mobile").attr("placeholder", "0912 555 5555");
                $("#Email").val('');
                $("#Description").val('');

            });

            ////// Click on Edit button (Modal window) //////
            individualTable.on("click",
                ".link-open-edit-modal",
                function() {
                    var editButton = $(this);

                    // Assign form control values to selected record for editing
                    $.ajax({
                        url: "/api/individuals/" + editButton.attr("data-individual-id"),
                        method: "GET"

                    }).done(function(data) {
                        console.log(data);
                        $("#Name").val(data.name);
                        // var workPlaceTypeId = data.workPlaceDto.workPlaceTypeDto.id;
                        //console.log(workPlaceTypeId);
                        $("#WorkPlaceType").val(data.workPlaceDto.workPlaceTypeDto.id);
                        $("#WorkPlaceName").val(data.workPlaceDto.name);
                        $("#SematId").val(data.sematDto.id);
                        if (data.gender === null)
                            $("#Gender").val(0);
                        else if (data.gender === true)
                            $("#Gender").val('true');
                        else
                            $("#Gender").val('false');

                        $("#TelDirect").val(data.telDirect);
                        $("#TelDakheli").val(data.telDakheli);
                        $("#Mobile").val(data.mobile);
                        $("#Email").val(data.email);
                        $("#Description").val(data.description);
                        $("#Id").val(data.id);

                    }).fail(function(status) {
                        alert("fail to real data");
                        console.log(status);
                    });
                });

            // hide validatin error when modal closed: because the error msg remain for other records when clicking on edit
            $("#individualFormModal").on('hidden.bs.modal',
                function(e) {
                    console.log("modal closed");
                    $(".form-group > span").removeClass("field-validation-error").children("span").remove();
                    $(".form-group > .form-control").removeClass("input-validation-error");
                });


            // move validation span under inputs
            $(window).load(function() {
                $("#individualFormModal").on('shown.bs.modal',
                    function() {
                        //$(".form-group > span").addClass('newline');
                        $(".form-group > span").css("display", "block"); // it is better(no need to .newline class)
                    });

            });


            // Save Data using api controller
            $("#saveButton2").click(function() {
                var dataIsvalid = $("#individualForm").valid();

                if (dataIsvalid) {
                    // Check for new Company/Office name:
                    $.getJSON("/api/workplacesIdAndName",
                        function(data) {
                            //console.log(data);
                            var workPlaceName = document.getElementById("individualForm").WorkPlaceName.value;
                            var idOfExistingPlace = -1;
                            for (var i in data) {
                                if (workPlaceName.search(data[i].name) !== -1)
                                    idOfExistingPlace = data[i].id;
                            }

                            // Create a hidden input element for form if not already exist
                            if (("WorkPlaceId" in window) !== true) {
                                $("<input>").attr({
                                    type: 'hidden',
                                    id: 'WorkPlaceId',
                                    name: 'WorkPlaceId',
                                    value: null
                                }).appendTo("#individualForm");
                            }

                            // fill WorkPlaceId value 
                            if ($("#WorkPlaceName").val() === "") {
                                $("#WorkPlaceId").val(null);
                            }
                            else if (idOfExistingPlace !== -1) {
                                $("#WorkPlaceId").val(idOfExistingPlace);
                            }
                            else if (idOfExistingPlace === -1) {  // workplace filled by user
                                console.log("adding new workplace");
                            }

                        });

                    //var formData = $("#individualForm").serialize();
                    ////console.log(formData);

                    //var idOfForm = document.getElementById("individualForm").Id.value;

                    //if (idOfForm === '0') { // New individual (id='0')
                    //    $.post("/api/individuals",
                    //        formData,
                    //        function(data, status) {
                    //            console.log(data);
                    //            console.log(status);

                    //            $("#individualFormModal").modal('toggle');  // close modal
                    //            location.reload();
                    //        });
                    //} else { // Edit existing individual (id != '0')
                    //    $.post("/api/individuals/" + idOfForm,
                    //        formData,
                    //        function(data, status) {
                    //            console.log(data);
                    //            console.log(status);
                    //            if (status === 'success')
                    //                console.log('updated successfully');
                    //        });
                    //}
                }

            });

        }); // end of $(document).ready(function () {


        //////      Input Filter    ///////
        function setInputFilter(textbox, inputFilter) {
            ["input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop"].forEach(
                function(event) {
                    textbox.addEventListener(event,
                        function() {
                            if (inputFilter(this.value)) {
                                this.oldValue = this.value;
                                this.oldSelectionStart = this.selectionStart;
                                this.oldSelectionEnd = this.selectionEnd;
                            } else if (this.hasOwnProperty("oldValue")) {
                                this.value = this.oldValue;
                                this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
                            }
                        });
                });
        }

        // Set Filter for TelDakheli: Maximum 4 digit(only digit)
        setInputFilter(document.getElementById("TelDakheli"),
            function(value) {
                return /^\d*$/.test(value) && (value === "" || value.length <= 4);
            });

        // Set Filter for TelDakheli: 10 digit with space separator(only digit) : 0912 555 5555
        document.getElementById('Mobile').addEventListener('input',
            function(e) {
                var x = e.target.value.replace(/\D/g, '').match(/(\d{0,4})(\d{0,3})(\d{0,4})/);
                e.target.value = !x[2] ? x[1] : x[1] + ' ' + x[2] + (x[3] ? ' ' + x[3] : '');
            });
        //__________ Input Filter ___________//

        //////      Auto Complete       //////
        // On page load: 
        //Auto Complete WorkPlace name input
        $.getJSON("/api/workplacesOnlyName",
            function (workplaceNames) {
                var workplaceInput = document.getElementById("WorkPlaceName");
                autocomplete(workplaceInput, workplaceNames);

                function autocomplete(inp, arr) {
                    /*the autocomplete function takes two arguments,
                    the text field element and an array of possible autocompleted values:*/
                    var currentFocus;
                    /*execute a function when someone writes in the text field:*/
                    inp.addEventListener("input", function (e) {
                        var a, b, i, val = this.value;
                        /*close any already open lists of autocompleted values*/
                        closeAllLists();
                        if (!val) { return false; }
                        currentFocus = -1;
                        /*create a DIV element that will contain the items (values):*/
                        a = document.createElement("DIV");
                        a.setAttribute("id", this.id + "autocomplete-list");
                        a.setAttribute("class", "autocomplete-items");
                        /*append the DIV element as a child of the autocomplete container:*/
                        this.parentNode.appendChild(a);
                        /*for each item in the array...*/
                        for (i = 0; i < arr.length; i++) {
                            /*check if the item starts with the same letters as the text field value:*/
                            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                                /*create a DIV element for each matching element:*/
                                b = document.createElement("DIV");
                                /*make the matching letters bold:*/
                                b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                                b.innerHTML += arr[i].substr(val.length);
                                /*insert a input field that will hold the current array item's value:*/
                                b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                                /*execute a function when someone clicks on the item value (DIV element):*/
                                b.addEventListener("click", function (e) {
                                    /*insert the value for the autocomplete text field:*/
                                    inp.value = this.getElementsByTagName("input")[0].value;
                                    /*close the list of autocompleted values,
                                    (or any other open lists of autocompleted values:*/
                                    closeAllLists();
                                });
                                a.appendChild(b);
                            }
                        }
                    });
                    /*execute a function presses a key on the keyboard:*/
                    inp.addEventListener("keydown", function (e) {
                        var x = document.getElementById(this.id + "autocomplete-list");
                        if (x) x = x.getElementsByTagName("div");
                        if (e.keyCode == 40) {
                            /*If the arrow DOWN key is pressed,
                            increase the currentFocus variable:*/
                            currentFocus++;
                            /*and and make the current item more visible:*/
                            addActive(x);
                        } else if (e.keyCode == 38) { //up
                            /*If the arrow UP key is pressed,
                            decrease the currentFocus variable:*/
                            currentFocus--;
                            /*and and make the current item more visible:*/
                            addActive(x);
                        } else if (e.keyCode == 13) {
                            /*If the ENTER key is pressed, prevent the form from being submitted,*/
                            e.preventDefault();
                            if (currentFocus > -1) {
                                /*and simulate a click on the "active" item:*/
                                if (x) x[currentFocus].click();
                            }
                        }
                    });
                    function addActive(x) {
                        /*a function to classify an item as "active":*/
                        if (!x) return false;
                        /*start by removing the "active" class on all items:*/
                        removeActive(x);
                        if (currentFocus >= x.length) currentFocus = 0;
                        if (currentFocus < 0) currentFocus = (x.length - 1);
                        /*add class "autocomplete-active":*/
                        x[currentFocus].classList.add("autocomplete-active");
                    }
                    function removeActive(x) {
                        /*a function to remove the "active" class from all autocomplete items:*/
                        for (var i = 0; i < x.length; i++) {
                            x[i].classList.remove("autocomplete-active");
                        }
                    }
                    function closeAllLists(elmnt) {
                        /*close all autocomplete lists in the document,
                        except the one passed as an argument:*/
                        var x = document.getElementsByClassName("autocomplete-items");
                        for (var i = 0; i < x.length; i++) {
                            if (elmnt != x[i] && elmnt != inp) {
                                x[i].parentNode.removeChild(x[i]);
                            }
                        }
                    }
                    /*execute a function when someone clicks in the document:*/
                    document.addEventListener("click", function (e) {
                        closeAllLists(e.target);
                    });
                }

            });

        //__________________________________________________________________________________//

    </script>

    }
